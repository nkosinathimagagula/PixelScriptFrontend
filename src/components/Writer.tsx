export const Writer = (props: {text: string | undefined, headings: string[] | undefined}) => {
    const separatedHeadings: string[] = [];
    const textSections: string[] | undefined = props.text?.split("\n\n");

    // split the headings array properly
    const tempHeadings: string[][] = props.headings ? props.headings.map(element => element.split("\n\n")) : [];

    tempHeadings.map(element => {
        if (typeof(element) === 'object') {
            for (let i=0 ; i<element.length ; i++) {
                separatedHeadings.push(element[i]);
            }
        } else {
            separatedHeadings.push(element);
        }
    })

    // fully separated/splitted headings
    const finalHeadings: string[] = separatedHeadings.map(element => element.replace("\n", ""));

    // split sections to array of words (BM~bionic method)
    const BMArray = []
    if (textSections) {
        for (let i = 0 ; i < textSections.length ; i++) {
            BMArray.push(textSections[i].split(" "))
        }
    }
    
    return (
        <div>
            <div className="flex w-full items-center justify-center">
                <h3 className="text-sm">--Generated by @PixelScript--</h3>
            </div>
            {
                // apply bionic reading method algorithm
                BMArray.map((section, index) => {
                    const fHalfSection: string[] = [];
                    const lHalfSection: string[] = [];
                    const wordCount: number = section.length;


                    // separate all words in eact section
                    for (let i = 0 ; i < wordCount ; i++) {
                        const word: string = section[i].replace("\n", " ");
                        const charsLength: number = word.length;
                        const bold: number = Math.ceil(charsLength / 2);
                        const fHalf: string = word.slice(0, bold)
                        const lHalf: string = word.slice(bold, charsLength)

                        fHalfSection.push(fHalf);
                        lHalfSection.push(lHalf + " ");
                    }

                    // headings
                    if (finalHeadings.includes(textSections? textSections[index].replace("\n", "") : "")) {
                        return (
                            <div key={`d${index}`}>
                                <p className="flex flex-wrap text-black tracking-tight">
                                    {
                                        // map each section to return word with bionic method applied
                                        fHalfSection.map((word, index_n) => (
                                            <span key={`s${index_n}`}>
                                                <span className="text-[20px] font-normal leading-[30px]">
                                                    <b className="font-semibold">{word}</b>{lHalfSection[index_n]}
                                                </span>
                                                &nbsp;
                                            </span>
                                        ))
                                    }
                                </p>
                                &nbsp;
                            </div>
                        )
                    }

                    return (
                        // paragraphs / sentences
                        <div key={`d${index}`}>
                            <p className="flex flex-wrap text-black tracking-tight">
                                {
                                    // map each section to return word with bionic method applied
                                    fHalfSection.map((word, index_n) => (
                                        <span key={`s${index_n}`}>
                                            <span className="text-[16px] font-normal leading-[30px]">
                                                <b className="font-semibold">{word}</b>{lHalfSection[index_n]}
                                            </span>
                                            &nbsp;
                                        </span>
                                    ))
                                }
                            </p>
                            &nbsp;
                        </div>
                    )
                })
            }
        </div>
    )
}

